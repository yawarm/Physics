#Generelt om koden
#-----------------#
#Koden gjør en tidsdiskretisering, og bruker Eulers metode til å finne farten og vinkelen iterativt.
#Disse størrelsene blir så brukt til å beregne vinkelhastighet, normalkraften, posisjon, vinkelakselerasjon, og brukes i energibetraktninger.

import numpy as np

#Konstante parametere. 
#Alle størrelser er SI-enheter
g = 9.81 #tyngdeakselerasjon
dt = 0.0001 #Steglengde (holder denne lav for å minimalisere feil i Eulers metode)
r_bane = 0.5 #bane radius
v_start = 0.0001 #Start hastighet (holder denne lav, legemer ble sluppet uten start fart)

#Justerbare parametere
#Alle enheter er SI-enheter
r_objekt = 0.025 #radius på objektet som modelleres (i oppgave 1 settes denne til null, siden objektet kan betraktes som en punktpartikkel)
c = 1/2 #Objektets treghetsmoment konstant (vet ikke formell navn?)
µ_s = 0.6 #Statisk friksjonskoeffisient
µ_k = 0.6 #Kinetisk friksjonskoeffisient
theta_s = 0.073304 #Start vinkel relativ 0 i radianer
m = 1.411 #Objektets masse i kilogram

#Liste over lister 
#-----------------#
#For hver itterasjon/tidssteg koden kjører, vil den generere nye tallverdier for variablene gitt under. 
#For å kunne bruke disse senere, er det hensiktsmessig å lagre dem i lister. Verdiene brukes blant annet til visuell representasjon av data.
#I koden under defineres relevante lister for oppgaven. Det blir også lagt inn initialverdier for de ulike variablene.

Theta = [] #Vinkel langs banen målt relativt null, i radianer
Theta.append(theta_s) #Legger til startvinkelen

V = [] #Hastigheten til massesenteret under bevegelsen
V.append(v_start) #Legger til starthastighet

V_x = [] #Massesenterets fartskomponent i x-retning
V_x.append(v_start*np.cos(theta_s)) # Legger til start fart i x-retning

V_y = [] #Massesenterets fartskomponent i y-retning
V_y.append(-v_start*np.sin(theta_s)) #Legger til start fart i y-retning

W = [] #Vinkelhastigheten til objektet om origo
W.append(v_start/(r_objekt+r_bane)) #Legger til start vinkelhastighet

X = [] #x-posisjon målt relativ origo
X.append((r_objekt + r_bane)*np.sin(theta_s)) #Legger til start x-posisjon

Y = [] #y-posisjon målt relativ origo
Y.append((r_objekt + r_bane)*np.cos(theta_s)) #Legger til start y-posisjon

N = [] #Normalkraft
N.append(m*g*np.cos(theta_s)) #Legger til normalkraften ved start

A_tan_1 = [] #Massesenterets tangentsielle akselerasjon oppgave 1
A_tan_1.append(g*np.sin(theta_s)) #Legger til tangentsiell akselerasjon ved start for oppgave 1

A_tan_2 = [] #Massesenterets tangentsielle akselerasjon oppgave 2
A_tan_2.append((g*np.sin(theta_s))/(c+1)) #Legger til tangentsiell akselerasjon ved start oppgave 2

Tid = [] #tid
Tid.append(dt)

F_max = [] # Maksimal friksjonskraft
F_max.append(µ_s*m*g*np.cos(theta_s)) #Legger til Maksimal friksjonskraft ved start

Alfa = [] #Vinkelakselerasjon
Alfa.append((g*np.sin(theta_s))/(r_objekt+r_bane)) #Legger til vinkelakselerasjon ved start

F_rull = [] #Friksjonskraften under ren rulling
F_rull.append((c*m*g*np.sin(theta_s))/(c+1)) #Legger til friksjonskraft ved start

F_slur = [] #Friksjonskraft under sluring - ingen startverdi

A_tan_slur = [] #Tangtsiell akselerasjon under sluring - ingen startverdi

N_slur = [] #Normalkraft under sluring - ingen startverdi

Potensiell = [] #Potensiell energi
Potensiell.append(m*g*((r_objekt + r_bane)*np.cos(theta_s))) #Legger til potensiell energi ved start

K_trans = [] #Kinetisk energi grunnet translasjon
K_trans.append(m*0.5*v_start**2) #Legger til kinetisk energi grunnet translasjon ved start

K_rot = [] #Kinetisk energi grunnet rotasjon
K_rot.append(0.5*c*m*(v_start)**2) #Legger til kinetisk energi grunnet rotasjon ved start

Mekanisk_E = [] #Meknaisk energi 
Mekanisk_E.append(Potensiell[0] + K_trans[0] + K_rot[0]) #Legger til mekanisk energi ved start

F_work = [] #Arbeid utført av friksjonskraften
F_work.append(0) #I starten er ingen friksjonsarbeid utført - legger til 0 i listen

#V_rel = [] #Farten massesenter har relativ underlag under sluring
#Hensiktsmessig å definere denne størrelsen, siden den viser seg å være nyttig i beregninger av friksjonsarbeidet. 


#---------------------------------#


#Oppgave 1 (Inkludert energibetraktning)

if len(Theta) > 1:
    del Theta[1:], V[1:], V_x[1:], V_y[1:], W[1:], N[1:], X[1:], Y[1:], Tid[1:], A_tan_1[1:], N_slur[1:], A_tan_2[1:], A_tan_slur[1:]
    del Mekanisk_E[1:], Potensiell[1:], K_trans[1:], F_work[1:], K_rot[1:], V_rel[1:], Alfa[1:], F_slur[1:]

#Koden over kjøres for å fjerne alle verdiene i listene, utenom initialverdien. 

i = 0 #Indeks for loop
while N[i] > 0:
    v = V[i] + Tid[0]*A_tan_1[i] #ny fart
    V.append(v)
    w = V[-1]/r_bane #ny vinkelhastighet
    W.append(w)
    theta = Theta[i] + W[-1]*Tid[0] #ny vinkel
    Theta.append(theta)
    n = m*g*(3*np.cos(Theta[-1]) - 2*np.cos(theta_s)) #ny normalkraft
    N.append(n)
    a_tan = g*np.sin(Theta[-1]) #ny tangetsiell akselerasjon
    A_tan_1.append(a_tan)
    v_x = V[i]*np.cos(Theta[-1]) #ny fart x-komponent
    V_x.append(v_x)
    v_y = -V[i]*np.sin(Theta[-1])#ny fart y-komponent
    V_y.append(v_y)
    x = (r_objekt + r_bane)*(np.sin(Theta[-1])) #ny x-posisjon
    X.append(x)
    y = (r_objekt + r_bane)*(np.cos(Theta[-1])) #ny-posisjon
    Y.append(y)
    potensiell = m*g*Y[-1] #ny potensiell energi 
    Potensiell.append(potensiell)
    k_trans = 0.5*m*(V[-1])**2 #ny kinetisk energi translasjon
    K_trans.append(k_trans)
    mekanisk_e = potensiell + k_trans #ny mekanisk energi
    Mekanisk_E.append(mekanisk_e)
    tid = dt*i
    Tid.append(tid)
    i += 1


#---------------------#

#Oppgave 2 (inkludert energibetraktning)

if len(Theta) > 1:
    del Theta[1:], V[1:], V_x[1:], V_y[1:], W[1:], N[1:], X[1:], Y[1:], Tid[1:], A_tan_1[1:], N_slur[1:], A_tan_2[1:], A_tan_slur[1:]
    del Mekanisk_E[1:], Potensiell[1:], K_trans[1:], F_work[1:], K_rot[1:], V_rel[1:], Alfa[1:], F_slur[1:]

#Koden over kjøres for å fjerne alle verdiene i listene, utenom initialverdien. 

i = 0 #Indeks for loop
while N[i] > 0:
    v = V[i] + Tid[0]*A_tan_2[i] #ny fart
    V.append(v)
    w = V[-1]/(r_bane+r_objekt) #ny vinkelhastighet
    W.append(w)
    theta = Theta[i] + W[-1]*Tid[0] #ny vinkel
    Theta.append(theta)
    n = m*g*np.cos(Theta[-1]) + (-2*m*g*(np.cos(theta_s) - np.cos(Theta[-1])))/(1+c) #ny normalkraft
    N.append(n)
    f_max = µ_s*N[-1] #ny max friksjonskraft
    F_max.append(f_max)
    a_tan = (g*np.sin(Theta[-1]))/(c+1)#ny tangetsiell akselerasjon
    A_tan_2.append(a_tan)
    alfa = A_tan_2[-1]/(r_bane+r_objekt) #Ny vinkelakselerasjon
    Alfa.append(alfa)
    v_x = V[i]*np.cos(Theta[-1]) #ny fart x-komponent
    V_x.append(v_x)
    v_y = -V[i]*np.sin(Theta[-1])#ny fart y-komponent
    V_y.append(v_y)
    x = (r_objekt + r_bane)*(np.sin(Theta[-1])) #ny x-posisjon
    X.append(x)
    y = (r_objekt + r_bane)*(np.cos(Theta[-1])) #ny-posisjon
    Y.append(y)
    f_rull = (m*g*c*np.sin(Theta[-1]))/(c + 1)
    F_rull.append(f_rull)
    potensiell = m*g*Y[-1] #ny potensiell energi 
    Potensiell.append(potensiell)
    k_trans = 0.5*m*(V[-1])**2 #ny kinetisk energi translasjon
    K_trans.append(k_trans)
    k_rot = 0.5*c*m*(V[-1])**2 #ny kinetisk energi rotasjon
    K_rot.append(k_rot)
    mekanisk_e = potensiell + k_trans + k_rot #ny mekanisk energi
    Mekanisk_E.append(mekanisk_e)
    tid = dt*i #Ny tid
    Tid.append(tid)
    i += 1

#----------------#

#oppgave 3 (inkludert energibetraktninger)

if len(Theta) > 1:
    del Theta[1:], V[1:], V_x[1:], V_y[1:], W[1:], N[1:], X[1:], Y[1:], Tid[1:], A_tan_1[1:], N_slur[1:], A_tan_2[1:], A_tan_slur[1:]
    del Mekanisk_E[1:], Potensiell[1:], K_trans[1:], F_work[1:], K_rot[1:], V_rel[1:], Alfa[1:], F_slur[1:]

#Koden over kjøres for å fjerne alle verdiene i listene, utenom initialverdien. 

i = 0 #Indeks for loop
while N[-1] > 0:
    v = V[i] + Tid[0]*A_tan_2[i] #ny fart
    V.append(v)
    w = V[-1]/(r_bane+r_objekt) #ny vinkelhastighet
    W.append(w)
    theta = Theta[i] + W[i+1]*Tid[0] #ny vinkel
    Theta.append(theta)
    n = m*g*np.cos(Theta[-1]) + (-2*m*g*(np.cos(theta_s) - np.cos(Theta[-1])))/(1+c) #ny normalkraft
    N.append(n)
    f_max = µ_s*N[-1] #ny max friksjonskraft
    F_max.append(f_max)
    a_tan = (g*np.sin(Theta[-1]))/(c+1)#ny tangetsiell akselerasjon
    A_tan_2.append(a_tan)
    alfa = A_tan_2[-1]/(r_bane+r_objekt) #Ny vinkelakselerasjon
    Alfa.append(alfa)
    v_x = V[-1]*np.cos(Theta[-1]) #ny fart x-komponent
    V_x.append(v_x)
    v_y = -V[-1]*np.sin(Theta[-1])#ny fart y-komponent
    V_y.append(v_y)
    x = (r_objekt + r_bane)*(np.sin(Theta[-1])) #ny x-posisjon
    X.append(x)
    y = (r_objekt + r_bane)*(np.cos(Theta[-1])) #ny-posisjon
    Y.append(y)
    f_rull = (m*g*c*np.sin(Theta[-1]))/(c + 1)
    F_rull.append(f_rull)
    potensiell = m*g*Y[-1] #ny potensiell energi 
    Potensiell.append(potensiell)
    k_trans = 0.5*m*(V[-1])**2 #ny kinetisk energi translasjon
    K_trans.append(k_trans)
    k_rot = 0.5*c*m*(V[-1])**2 #ny kinetisk energi rotasjon
    K_rot.append(k_rot)
    mekanisk_e = potensiell + k_trans + k_rot #ny mekanisk energi
    Mekanisk_E.append(mekanisk_e)
    if f_rull > f_max: #Betingelse for overgang fra ren rulling til sluring
        theta_kritisk = Theta[i]
        k = i #lagrer indexen vi går over fra ren rulling til sluring
        j = 0
        while N[-1] > 0:
            f_slur = µ_k*N[-1] #friksjonskraft sluring
            F_slur.append(f_slur)
            w_rull = W[-1] + (F_slur[-1]*dt)/(c*m)
            W.append(w_rull)
            a_tan_slur = (g*np.sin(Theta[-1])) - (F_slur[j])/m #tangentsiell akselerasjon sluring
            A_tan_slur.append(a_tan_slur)
            v = V[i] + dt*A_tan_slur[j] #ny fart
            V.append(v)
            #v_rel = (V[-1]) - (W[-1]*(r_objekt))
            #V_rel.append(v_rel)
            theta_slur = Theta[-1] + (v*dt)/(r_objekt+r_bane)
            Theta.append(theta_slur)
            n_slur = m*g*np.cos(Theta[-1]) - m*(v**2)/(r_bane + r_objekt)
            N.append(n_slur)
            x = (r_objekt + r_bane)*(np.sin(Theta[i+1])) #ny x-posisjon
            X.append(x)
            y = (r_objekt + r_bane)*(np.cos(Theta[i+1])) #ny-posisjon
            Y.append(y)
            #f_work = F_slur[-1]*V_rel[-1]*dt + F_work[-1] #arbeid gjort av friksjonskraft
            #F_work.append(f_work)
            k_trans = 0.5*m*(V[-1])**2 #Kinetisk energi translasjon
            K_trans.append(k_trans)
            k_rot = 0.5*c*m*(V[-1])**2 #Kinetisk energi rotasjon
            K_rot.append(k_rot)
            potensiell = m*g*Y[-1] #Potensiell energi 
            Potensiell.append(potensiell)
            mekanisk_e = K_trans[-1] + K_rot[-1] + Potensiell[-1] # Mekanisk energi
            Mekanisk_E.append(mekanisk_e)
            tid = dt*i
            Tid.append(tid)
            j += 1
            i += 1
    else:
        tid = dt*i
        Tid.append(tid)
        i += 1


#FIGUR 1 - oppgave 1

import matplotlib.pyplot as plt

plt.figure(1)  # Initialize a new figure - k er figurnummer
plt.plot(Theta, Mekanisk_E), '--r'  #  Plot x-vals and y-vals (listene med x og y verdier)
# - - gir stipla linjer,     r gir rød graf
plt.xlabel('vinkel rad', fontsize=10)  # Add name to x-axis, change fontsize
plt.ylabel('Mekanisk energi', fontsize=10)  # Add name to y-axis, change fontsize
plt.title('Mekanisk energi som funksjon av vinkel i radianer')  # Add title to the figure
plt.xticks(fontsize=14)  # Change fontsize of x-ticks
plt.yticks(fontsize=14)  # Change fontsize of y-ticks
plt.grid()
plt.show()  # Show the figure """


#FIGUR 2 - oppgave 1

import matplotlib.pyplot as plt

plt.figure(1)  # Initialize a new figure - k er figurnummer
plt.plot(Theta, V), '--r'  #  Plot x-vals and y-vals (listene med x og y verdier)
# - - gir stipla linjer,     r gir rød graf
plt.xlabel('vinkel rad', fontsize=10)  # Add name to x-axis, change fontsize
plt.ylabel('fart ms^-1', fontsize=10)  # Add name to y-axis, change fontsize
plt.title('Fart som funksjon av vinkel i radianer')  # Add title to the figure
plt.xticks(fontsize=14)  # Change fontsize of x-ticks
plt.yticks(fontsize=14)  # Change fontsize of y-ticks
plt.grid()
#plt.show()  # Show the figure """


#FIGUR 3 - Oppgave 3

import matplotlib.pyplot as plt

plt.figure(1)  # Initialize a new figure - k er figurnummer
plt.plot(Theta, Mekanisk_E), '--r'  #  Plot x-vals and y-vals (listene med x og y verdier)
# - - gir stipla linjer,     r gir rød graf
plt.xlabel('vinkel rad', fontsize=10)  # Add name to x-axis, change fontsize
plt.ylabel('Mekanisk energi', fontsize=10)  # Add name to y-axis, change fontsize
plt.title('Mekanisk energi som funksjon av vinkel i radianer')  # Add title to the figure
plt.xticks(fontsize=14)  # Change fontsize of x-ticks
plt.yticks(fontsize=14)  # Change fontsize of y-ticks
plt.grid()
plt.show()  # Show the figure """
